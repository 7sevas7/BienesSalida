@page "/consulta"
@inject IJSRuntime JS

<PageTitle>Historial</PageTitle>
<h1 class="text-center m-5 custom-text"> Historial de salidas</h1>

<div class="mb-3 text-center w-50 mx-auto">
    <h3 for="busque" class="form-label p-6 me-2">Realizar busqueda: </h3>
</div>

<div class="mb-3 text-center w-75 mx-auto d-flex align-items-center">
    <DateInput TValue="DateOnly?" @bind-Value="@date1" @oninput="HandleInput" Placeholder="Fecha" />

    <!--<input type="text" class="form-control shadow-lg p-2 m-3" id="search" @bind="nombreUs" placeholder="Nombre" Style="text-transform: uppercase">-->
    <TextInput @bind-Value="@nombreUs" Class="shadow-lg p-2 m-3" Placeholder="Nombre"/>
    <!--<input type="text" class="form-control shadow-lg p-2 m-3" id="search" @bind="nInvenStr" placeholder="No. Inventario">-->
    <TextInput @bind-Value="@nInvenStr" Class="shadow-lg p-2 m-3" Placeholder="No. Inventario" />

    <Button Color="ButtonColor.Primary" class="shadow-lg p-2 m-2" @onclick="Buscar">
        <Icon Name="IconName.Search" Color="IconColor.White" />
    </Button>
    <Button Color="ButtonColor.Success"
            class="shadow-lg p-2 m-3"
            Disabled="@(!tieneDatos)"
            @onclick="DescargarExcel">
        <Icon Name="IconName.FileTypeXls" Color="IconColor.White" />
    </Button>
</div>

<TablaConsulta 
@ref="tablaRef"
Nombre="@nombre"
NoInvenStr="@nInven"
Fecha="@date"/> 

@code {

    private TablaConsulta tablaConsulta { set; get; }= new();
    //Inputs
    private DateOnly? date1 = DateOnly.FromDateTime(DateTime.Now);    
    public string nombreUs { get; set; } = string.Empty;
    public string nInvenStr { get; set; } = string.Empty;


    //nuevos
    private DateOnly? date = DateOnly.FromDateTime(DateTime.Now);
    public string nombre { get; set; } = string.Empty;
    public string nInven { get; set; } = string.Empty;

    private TablaConsulta? tablaRef;
    private bool tieneDatos = false;

    private void HandleInput(ChangeEventArgs e)
    {
        if (string.IsNullOrWhiteSpace(e.Value?.ToString()))
        {
            date1 = null;
        }
    }

    private async Task Buscar()
    {
        nombre = nombreUs;
        nInven = nInvenStr;
        date = date1;

        StateHasChanged();

        await Task.Delay(50); // para que el componente se actualice

        tieneDatos = tablaRef?.ObtenerDatos()?.Any() == true;
    }

    private async Task DescargarExcel()
    {
        if (tablaRef is null)
            return;

        var datos = tablaRef.ObtenerDatos();

        if (datos.Count == 0)
        {
            Console.WriteLine("⚠️ No hay registros para exportar.");
            return;
        }

        // 🔤 Nombre dinámico con fecha
        var nombreArchivo = $"Historial_{DateTime.Now:yyyyMMdd}.xlsx";

        // 📦 Generar el contenido del archivo
        //var bytes = ReporteExcel.GenerarArchivo(datos);

        // 📨 Llamar al JS para descargarlo
        //await JS.InvokeVoidAsync("descargarArchivo", nombreArchivo, Convert.ToBase64String(bytes));
    }
}