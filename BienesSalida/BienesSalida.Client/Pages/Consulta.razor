@page "/consulta"
@inject IJSRuntime JS

<PageTitle>Historial</PageTitle>
<h1 class="text-center m-5 custom-text"> Historial de salidas</h1>

<div class="mb-3 text-center w-50 mx-auto">
    <h3 for="busque" class="form-label p-6 me-2">Realizar busqueda: </h3>
</div>

<Toasts class="p-3" Messages="messages" AutoHide="true" Delay="6000" Placement="ToastsPlacement.TopRight" />
<div class="container my-4">
    <div class="row g-3 align-items-end">
        <div class="col-md-3">
            <label class="form-label">Fecha de inicio</label>
            <input type="date" class="form-control" @oninput="HandleInput" @bind-value="date1" />
        </div>
        <div class="col-md-3">
            <label class="form-label">Fecha final</label>
            <input type="date" class="form-control" @oninput="HandleInput2"  />
        </div>
        <div class="col-md-3">
            <TextInput @bind-Value="@nombreUs" Class="form-control" Placeholder="Nombre" />
        </div>
        <div class="col-md-3">
            <TextInput @bind-Value="@nInvenStr" Class="form-control" Placeholder="No. Inventario" />
        </div>
        <div class="col-md-3 d-flex gap-2">
            <Button Color="ButtonColor.Primary" class="shadow-sm" @onclick="Buscar">
                <Icon Name="IconName.Search" Color="IconColor.White" />
            </Button>
            <Button Color="ButtonColor.Success" class="shadow-sm" @onclick="DescargarExcel" Disabled="@(!tieneDatos)">
                <Icon Name="IconName.FileTypeXls" Color="IconColor.White" />
            </Button>
        </div>
    </div>
</div>
<TablaConsulta @ref="tablaRef"/> 

@code {

    
    //Inputs
    private DateOnly? date1 = DateOnly.FromDateTime(DateTime.Now);
    private DateOnly? date2 = null;
    public string nombreUs { get; set; } = string.Empty;
    public string nInvenStr { get; set; } = string.Empty;


    private TablaConsulta? tablaRef { set; get; }=new();
    private bool tieneDatos = false;
    private void HandleInput(ChangeEventArgs e)
    {

        var valueStr = e?.Value?.ToString();

        if (string.IsNullOrWhiteSpace(valueStr))
        {
            date1 = null;
            return;
        }

        if (DateTime.TryParse(valueStr, out var dt))
        {
            date1 = DateOnly.FromDateTime(dt);
        }
        else
        {
            date1 = null;
        }
    }
    private void HandleInput2(ChangeEventArgs e)
    {

        var valueStr = e?.Value?.ToString();

        if (string.IsNullOrWhiteSpace(valueStr))
        {
            date2 = null;
            return;
        }

        if (DateTime.TryParse(valueStr, out var dt))
        {
            date2 = DateOnly.FromDateTime(dt);
        }
        else
        {
            date2 = null;// o puedes lanzar una alerta
        }
    }


    private async Task Buscar()
    {

        // Llama directamente la recarga si ya está montado el hijo
        if (tablaRef is not null)
        {
            await tablaRef.CargaTabla(nombreUs,nInvenStr,date1,date2);
            tieneDatos = tablaRef.historial.Count > 0;
        }
    }

    List<ToastMessage> messages = new List<ToastMessage>();

    private void ShowMessage(ToastType toastType) => messages.Add(CreateToastMessage(toastType));

    private ToastMessage CreateToastMessage(ToastType toastType) => new ToastMessage
    {
        Type = toastType,
        Message = "No hay registros para exportar.",
    };

    private async Task DescargarExcel()
    {
        ShowMessage(ToastType.Warning);
        if (tablaRef is null)
            return;

        var datos = tablaRef.historial;

        if (datos.Count > 0)
        {
            var url = await tablaRef.ObtenerHistorialExcel();
            await JS.InvokeVoidAsync("abrirEnNuevaPestania", url);
            ShowMessage(ToastType.Warning);         
        }
    }
    protected override void OnAfterRender(bool firstRender)
    {
        tieneDatos = tablaRef.historial.Count >= 1;
    }
}