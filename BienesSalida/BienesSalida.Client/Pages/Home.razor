@page "/home"
@inject NavigationManager navi
@inject HttpClient client
@inject LocalStorageService localService

<style>
    .valid.modified:not([type=checkbox]) {
    outline: 1px solid #26b050;
    }

    .invalid {
    outline: 1px solid red;
    }

    .validation-message {
    color: red;
    }
</style>

<PageTitle >Home</PageTitle>
<h1 class="text-center m-5 custom-text" id="titulo"> SOLICITUD DE SALIDA DE BIENES </h1>
<div class="container row w-100">
    <div class="mb-3 custom-text col-3">
        <h5 for="Nombre" class="form-label m-2">No. Empleado: @noEmple</h5>
        <h5 class="form-label m-2">Nombre: @(nombreUsuario?.ToUpper())</h5>
        <h5 class="label label-default m-2">Fecha actual: @fechaFormateada</h5>
        <h5 class="label label-default m-2">Hora actual: @horaFormateada</h5>
    </div>
    <div class="col-9">
        <TablaProductos AddActivo="OnShowModalClick"
                        ValidarInventario="YaFueSolicitado" />
    </div>
</div>
<!--
<div class="mb-3 w-50 mx-auto text-center custom-text">
<Button Color="ButtonColor.Danger" @onclick="OnShowModalClick" Outline="true" Class="shadow-lg">Registrar bien a salir</Button>
</div>
-->
<h3 class="m-5 custom-text">Activos solicitados a salir</h3>
<TablaSolicitud @ref="@tablaSolicitud"/>
<Button  Color="ButtonColor.Success" @onclick="@InsertarBienes">
    Enviar Solicitud
</Button>

@if (!string.IsNullOrEmpty(RawJson))
{
    <h4>@RawJson</h4>
}

<Modal @ref="modal" Title="Registrar bien a salir" UseStaticBackdrop="true" BodyCssClass="p-0" CloseOnEscape="false">
    <BodyTemplate>

        <EditForm EditContext="@editContext" OnValidSubmit="ValidateForm">
            <DataAnnotationsValidator />

            <div class="mb-3 w-100 custom-text" style="background-color:#e3e3e3; padding:1rem;">
                <div class="w-75 mx-auto">
                    <label class="form-label">Área <span class="text-danger">*</span></label>
                    <TextInput @bind-Value="@solicitud.Area" Style="text-transform: uppercase"/>
                    <ValidationMessage For="@(() => solicitud.Area)" />

                    <label class="form-label">Encargado de Área <span class="text-danger">*</span></label>
                    <TextInput @bind-Value="@solicitud.EncargadoArea" Style="text-transform: uppercase" />
                    <ValidationMessage For="@(()=>solicitud.EncargadoArea)"/>

                    <label class="form-label">No. de Inventario</label>
                    <NumberInput @bind-Value="@solicitud.NumeroInventario" Disabled="true"/>

                    <label class="form-label">Descripcion</label>
                    <TextAreaInput @bind-Value="@solicitud.Descripcion" Disabled="true" />

                    <label class="form-label">Motivo de salida <span class="text-danger">*</span></label>
                    <TextAreaInput @bind-Value="@solicitud.MotivoSalida" Style="text-transform: uppercase" />
                    <ValidationMessage For="@(() => solicitud.MotivoSalida)" />

                    <label class="form-label">Observaciones</label>
                    <TextAreaInput @bind-Value="@solicitud.Observaciones" Style="text-transform: uppercase" />
                    <ValidationMessage For="@(() => solicitud.Observaciones)" />
                </div>
            </div>
        </EditForm>

        <div class="toast-container position-fixed bottom-0 end-0 p-3 ">
            <div class="toast show text-bg-danger" role="alert" aria-live="assertive" aria-atomic="true" style="display:@(showToast ? "block" : "none")">
                <div class="toast-body">
                    @mensaje
                </div>
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <Button Type="ButtonType.Submit" Color="ButtonColor.Success" @onclick="ValidateForm">Enviar</Button>
    </FooterTemplate>
</Modal >

<Modal @ref="serviceModal">
    <BodyTemplate>
        @mensaje
    </BodyTemplate>   
</Modal>


@code {

    private Modal serviceModal { set; get; } = default!;
    //Este es para una carga     
    //Carag para evitar que el usuario haga alguna accion de mas
    [Inject] protected PreloadService PreloadService { get; set; } = default!;
    public string status = "Salida", fechaFormateada = "", horaFormateada = "", mensaje;
    public string? nombreUsuario { get; set; }
    public string? FyH { get; set; }
    public string? noEmple { get; set; }
    private Modal modal = default!;
    private SolicitudBien solicitud = new();
    private EditContext? editContext;
    private System.Timers.Timer? timer;
    private bool showToast = false;
    public List<Usuarios>? listaUsua = new();
    public Producto? producto = new();
    private TablaSolicitud tablaSolicitud = default!;
    public string? RawJson { get; set; }

    private async Task setInventario(ChangeEventArgs arg)
    {
        var client = new HttpClient();
        var request = new HttpRequestMessage(HttpMethod.Get, $"https://sistemas.dif.hidalgo.gob.mx/WebServicesARM/ActivoFijo/api/Bienes/consulta?bienID={arg.Value.ToString()}&pagina=1");
        var response = await client.SendAsync(request);
        response.EnsureSuccessStatusCode();
        var text = await response.Content.ReadAsStringAsync();
        Console.WriteLine(text);
        var paginado = JsonConvert.DeserializeObject<Paginado>(text);
        solicitud.Descripcion = paginado.registros[0].descripcion;
        solicitud.NumeroInventario = paginado.registros[0].bienID;

        Console.WriteLine(arg.Value.ToString());
    }

    protected override async Task OnInitializedAsync()
    {
        UpdateTime();
        StartTimer();
        editContext = new EditContext(solicitud);
    }

    private void StartTimer()
    {
        timer = new System.Timers.Timer(1000); // Ejecutar cada 1 segundo
        timer.Elapsed += (sender, e) => UpdateTime();
        timer.AutoReset = true;
        timer.Enabled = true;
    }

    private void UpdateTime()
    {
        DateTime fechaActual = DateTime.Now;
        fechaFormateada = fechaActual.ToString("dd/MM/yyyy");
        horaFormateada = fechaActual.ToString("HH:mm:ss");
        FyH = fechaFormateada + " " + horaFormateada;

        InvokeAsync(StateHasChanged); // Forzar actualización en la UI
    }

    private async Task OnShowModalClick(Producto producto)
    {
        solicitud.Descripcion = producto.descripcion;
        solicitud.NumeroInventario = producto.bienID;

        await modal.ShowAsync();
    }

    private async Task ValidateForm()
    {
        if (string.IsNullOrWhiteSpace(solicitud.Observaciones))
        {
            solicitud.Observaciones = "SIN OBSERVACIONES";
        }

        if (!editContext.Validate())
        {
            mensaje = "Algunos campos obligatorios están vacíos. Por favor, complétalos.";
            showToast = true;
            StateHasChanged();
            await Task.Delay(3000);
            showToast = false;
            StateHasChanged();
            return;
        }

        var existe = tablaSolicitud.solicitudes.Any(s =>
            s.NumeroInventario == solicitud.NumeroInventario &&
            s.Fecha == DateTime.Today.ToString("dd/MM/yyyy"));

        if (existe)
        {
            mensaje = "Activo ya solicitado para su salida.";
            showToast = true;
            Console.WriteLine("Ya se ha registrado este artículo hoy.");
            return;
        }

        solicitud.Fecha = DateTime.Today.ToString("dd/MM/yyyy");
        await tablaSolicitud.AddSolicitud(solicitud);
        solicitud = new SolicitudBien();
        editContext = new EditContext(solicitud);
        await modal.HideAsync();
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) {
            await localService.InitializeAsync();
            nombreUsuario = await localService.GetItemAsync("userBienes");
            noEmple = await localService.GetItemAsync("idUserBienes");
        }
    }
    public async Task ImprimirActivos()
    {
        var texto = JsonConvert.SerializeObject(tablaSolicitud.solicitudes);
        Console.WriteLine(texto);
    }
 
    private async Task InsertarBienes()
    {
        Console.WriteLine("Intento de envío individual de artículos");
        try
        {
            PreloadService.Show(SpinnerColor.Danger);

            var userId = int.Parse(await localService.GetItemAsync("idUserBienes") ?? "0");

            // Creamos nueva lista con los datos actualizados
            List<SolicitudBien> insertDatos = new();
            foreach (var item in tablaSolicitud.solicitudes)
            {
                item.Nombre = nombreUsuario;
                item.Fecha = FyH;
                insertDatos.Add(item);
            }

            int enviadosCorrectamente = 0;
            List<string> errores = new();

            foreach (var item in insertDatos)
            {
                InsertSolicitud solicitudIndividual = new InsertSolicitud
                {
                    idUser = userId,
                    activos = new List<SolicitudBien> { item }
                };

                var rawJson = JsonConvert.SerializeObject(solicitudIndividual);
                var content = new StringContent(rawJson, null, "application/json");

                var clientt = new HttpClient();
                var request = new HttpRequestMessage(HttpMethod.Post, $"{navi.BaseUri}api/activo");
                request.Content = content;

                var response = await clientt.SendAsync(request);
                var responseBody = await response.Content.ReadAsStringAsync();

                if (response.StatusCode != System.Net.HttpStatusCode.OK)
                {
                    var respuesta = JsonConvert.DeserializeObject<ResponseApi>(responseBody);
                    errores.Add($"\nEl artículo {item.NumeroInventario} ya fue solicitado previamente");
                }
                else
                {
                    enviadosCorrectamente++;
                }
            }

            PreloadService.Hide();

            if (errores.Any())
            {
                serviceModal.Title = "Solicitud con errores:";
                mensaje = mensaje = $"Se enviaron {enviadosCorrectamente} artículos correctamente.\nLos siguientes activos ya fueron previamente registrados:\n• {string.Join("\n• ", errores)}";
                serviceModal.HeaderCssClass = "bg-warning text-dark";
                
                await serviceModal.ShowAsync();
                await Task.Delay(4000);
                await serviceModal.HideAsync();
            }
            else
            {
                serviceModal.Title = "Solicitud correcta:";
                mensaje = "Todos los artículos fueron registrados exitosamente.";
                serviceModal.HeaderCssClass = "bg-success text-light";

                await serviceModal.ShowAsync();
                await Task.Delay(4000);
                await serviceModal.HideAsync();
                navi.NavigateTo(navi.Uri, forceLoad: true);
            }    
        }
        catch (Exception ex)
        {
            PreloadService.Hide();
            serviceModal.Title = "Error inesperado:";
            mensaje = $"Algo salió mal: {ex.Message}";
            serviceModal.HeaderCssClass = "bg-danger text-light";
            await serviceModal.ShowAsync();
        }
    }

    private bool YaFueSolicitado(long bienID)
    {
        var hoy = DateTime.Today.ToString("dd/MM/yyyy");
        return tablaSolicitud.solicitudes.Any(s => s.NumeroInventario == bienID && s.Fecha == hoy);
    }
   
}