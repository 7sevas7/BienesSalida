@inject NavigationManager navi

<Toasts Messages="messages" AutoHide="true" Delay="4000" Placement="ToastsPlacement.TopRight" />
<InputFilter  BuscarActivo="GetActivoFijoFilter" />

<Grid TItem="Producto"
Class="table table-hover table-bordered table-striped"
Data="paginado.registros"
AllowPaging="true"
PageSize="100"
Responsive="true">

    <GridColumns>
        <GridColumn TItem="Producto" HeaderText="Inventario">
            @context.bienID
        </GridColumn>
        <GridColumn TItem="Producto" HeaderText="Tipo de bien ">
            @context.tipoBien
        </GridColumn>      
        <GridColumn TItem="Producto" HeaderText="Marca">
            @context.marca
        </GridColumn>      
        <GridColumn TItem="Producto" HeaderText="Serie">
            @context.numeroDeSerie
        </GridColumn>     
        <GridColumn TItem="Producto" HeaderText="Descripción">
            @context.descripcion
        </GridColumn>
        <GridColumn TItem="Producto" HeaderText="Añadir Producto">
            <Button Color="ButtonColor.Success"
            Disabled="@activosDeshabilitados.Contains(context.bienID ?? 0)"
            @onclick="@(async () => await AddActivo(context))">
                <Icon Name="IconName.Plus" />
            </Button>
        </GridColumn>
    </GridColumns>

</Grid>

@code {

    private Paginado? paginado { set; get; } = new();
    [Parameter]
    public Func<Producto, Task> AddActivo { get; set; }
    [Parameter]
    public Func<long, bool> ValidarInventario { get; set; } = _ => false;
    List<ToastMessage> messages = new();
    private HashSet<long> activosDeshabilitados = new();


    private void ShowToast(string mensaje, ToastType tipo = ToastType.Warning)
    {
        messages.Add(new ToastMessage
        {
            Type = tipo,
            Message = mensaje
        });
    }
    protected override async Task OnInitializedAsync()
    {
        paginado.registros = new();
    }

    private async Task GetActivoFijoFilter(long? nInventario )
    {
        try
        {
            if (nInventario is not null && ValidarInventario.Invoke(nInventario.Value))
            {
                ShowToast("Este activo ya fue solicitado hoy.", ToastType.Warning);
                activosDeshabilitados.Add(nInventario.Value); // 👈 Deshabilitar el botón
                StateHasChanged();
                return;
            }
            else
            {
                //No Activos 
                activosDeshabilitados.Clear();


                var client = new HttpClient();
                //var request = new HttpRequestMessage(HttpMethod.Get, $"{navi.BaseUri}api/activo/proxy?invent={nInventario}");
                var request = new HttpRequestMessage(HttpMethod.Get, $"https://sistemas.dif.hidalgo.gob.mx/WebServicesARM/ActivoFijo/api/Bienes/consulta?bienID={nInventario}&pagina=1");
                var response = await client.SendAsync(request);
                //response.EnsureSuccessStatusCode();
                var text = await response.Content.ReadAsStringAsync();
                Console.WriteLine(text);
                paginado = JsonConvert.DeserializeObject<Paginado>(text);
                
                var listaInactivos = new List<long>();

                var activos = await this.getActivosFechas();

                foreach (var item in activos)
                {
                    activosDeshabilitados.Add(item);
                }

                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            Console.WriteLine("Ocurrió un error inesperado: " + e.Message);
        }
        //return paginado.registros;
    }

    public async Task<List<long>?> getActivosFechas()
    {
        try
        {
            var lista = new List<long>();
            var fecha = DateOnly.FromDateTime(DateTime.Now);
            var dateFecha = fecha.ToString("dd/MM/yyyy");
            var client = new HttpClient();
            var URL = $"{navi.BaseUri}api/activo/activosfecha?fecha={dateFecha}";
            var request = new HttpRequestMessage(HttpMethod.Get, URL);
            var response = await client.SendAsync(request);
            var responseTxt = await response.Content.ReadAsStringAsync();
            lista =  JsonConvert.DeserializeObject<List<long>>(responseTxt);
            return lista;
        } catch (Exception ex)
        {

            return new List<long>();
        }

    }
}