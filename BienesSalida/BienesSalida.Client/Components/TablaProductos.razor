<InputFilter  BuscarActivo="GetActivoFijoFilter" />

<Grid TItem="Producto"
Class="table table-hover table-bordered table-striped"
Data="paginado.registros"
AllowPaging="true"
PageSize="100"
Responsive="true">

    <GridColumns>
        <GridColumn TItem="Producto" HeaderText="Inventario">
            @context.bienID
        </GridColumn>
        <GridColumn TItem="Producto" HeaderText="Tipo de bien ">
            @context.tipoBien
        </GridColumn>      
        <GridColumn TItem="Producto" HeaderText="Marca">
            @context.marca
        </GridColumn>      
        <GridColumn TItem="Producto" HeaderText="Serie">
            @context.numeroDeSerie
        </GridColumn>     
        <GridColumn TItem="Producto" HeaderText="Descripción">
            @context.descripcion
        </GridColumn>
        <GridColumn TItem="Producto" HeaderText="Añadir Producto">
            <Button Color="ButtonColor.Success" @onclick="@(async ()=> await AddActivo(@context))">
                <Icon Name="IconName.Plus"/>
            </Button>

        </GridColumn>
    </GridColumns>

</Grid>

@code {
    private IEnumerable<Producto> productos = default!;
    private Paginado? paginado { set; get; } = new();

    [Parameter]
    public Func<Producto,Task>AddActivo{ set; get; }

    protected override async Task OnInitializedAsync()
    {
        paginado.registros = new();
    }
    private async Task<GridDataProviderResult<Producto>> EmployeesDataProvider(GridDataProviderRequest<Producto> request)
    {
        if (productos is null) // pull employees only one time for client-side filtering, sorting, and paging
            productos = await GetEmployees(); // call a service or an API to pull the employees

        return await Task.FromResult(request.ApplyTo(productos));
    }

    private async Task<IEnumerable<Producto>> GetEmployees()
    {
        var client = new HttpClient();
        var request = new HttpRequestMessage(HttpMethod.Get, "http://172.16.2.28/WebServicesARM/ActivoFijo/api/Bienes/consulta");
        var response = await client.SendAsync(request);
        response.EnsureSuccessStatusCode();
        var text = await response.Content.ReadAsStringAsync();
        Console.WriteLine(text);
        paginado = JsonConvert.DeserializeObject<Paginado>(text);

        return  paginado.registros;
    }
    private async Task GetActivoFijoFilter(int? nInventario )
    {
        if (nInventario is not null) {
            var client = new HttpClient();
            var request = new HttpRequestMessage(HttpMethod.Get, $"http://172.16.2.28/WebServicesARM/ActivoFijo/api/Bienes/consulta?bienID={nInventario}");
            var response = await client.SendAsync(request);
            //response.EnsureSuccessStatusCode();
            var text = await response.Content.ReadAsStringAsync();
            Console.WriteLine(text);
            paginado = JsonConvert.DeserializeObject<Paginado>(text);
            StateHasChanged();
        }
        //return paginado.registros;
    }
}