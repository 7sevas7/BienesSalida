@inject LocalStorageService localService
@inject HttpClient client
@inject NavigationManager navi
@inject IJSRuntime JS
<Grid 
@ref="tablaData"
TItem="SalidasBienes"
Class="table table-hover table-bordered table-striped"
Data="historial"
AllowPaging="true"
PageSize="100"
Responsive="true">
    <GridColumns>
        <GridColumn TItem="SalidasBienes" HeaderText="Nombre"> 
            @context.nombre
        </GridColumn>
        <GridColumn TItem="SalidasBienes" HeaderText="Fecha">
            @context.fechaHora
        </GridColumn>
        <GridColumn TItem="SalidasBienes" HeaderText="No. Salida"> 
            @context.noSal
        </GridColumn>
        <GridColumn TItem="SalidasBienes" HeaderText="No. Inventario"> 
            @context.noInven
        </GridColumn>
        <GridColumn TItem="SalidasBienes" HeaderText="Descripción"> 
            @context.descrip
        </GridColumn>
        <GridColumn TItem="SalidasBienes" HeaderText="Motivo"> 
            @context.motivo
        </GridColumn>
        <GridColumn TItem="SalidasBienes" HeaderText="Observaciones"> 
            @context.observa
        </GridColumn>
        <GridColumn TItem="SalidasBienes" HeaderText="Área"> 
            @context.area
        </GridColumn>
        <GridColumn TItem="SalidasBienes" HeaderText="Enc. Área"> 
            @context.eArea
        </GridColumn>
        <GridColumn TItem="SalidasBienes" HeaderText="Estatus"> 
            @context.estatus
        </GridColumn>
    </GridColumns> 

</Grid>

@code{

    private Grid<SalidasBienes>? tablaData { set; get; } = new();

    [Parameter]
    public string Nombre { get; set; } = string.Empty;
    [Parameter]
    public string NoInvenStr { get; set; } = string.Empty;
    [Parameter]
    public DateOnly? Fecha { get; set; } = DateOnly.FromDateTime(DateTime.Now);

    private IJSObjectReference? _jsModule { set; get; }

    private List<SalidasBienes>? historial { set; get; }  


    protected override async Task OnInitializedAsync()
    {
        historial = new();

        _jsModule = await JS.InvokeAsync<IJSObjectReference>("import", "./js/localStorage.js");
    }

    /*protected override async Task OnParametersSetAsync()
    {

            historial = await ObtenerHistorialAsync();
    await tablaData.RefreshDataAsync();

    }*/
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
    if (firstRender) {
                
        historial = await ObtenerHistorialAsync();
        await tablaData.RefreshDataAsync();
        StateHasChanged();
    }
    }

    private async Task<List<SalidasBienes>> ObtenerHistorialAsync( )
    {
  
    var idUser = await _jsModule.InvokeAsync<string>("idUserBienes");
        if (idUser != string.Empty)
        {
            var fecha = Fecha?.ToString("dd/MM/yyyy"); // Formato seguro para URL
            var url = $"{navi.BaseUri}api/activo/historial?idUser={idUser}&fecha={fecha}&invent={NoInvenStr}&nombre={Nombre}";
            var request = new HttpRequestMessage(HttpMethod.Get, url);
            var response = await client.SendAsync(request);
            var text = await response.Content.ReadAsStringAsync();

            var data = JsonConvert.DeserializeObject<List<SalidasBienes>>(text);

            return data;
        }
        return new List<SalidasBienes>();
    }
    public async Task CargaTabla()
    {
        historial = new();
        historial = await ObtenerHistorialAsync();
    await tablaData.RefreshDataAsync();
    }


} 