@* @inject LocalStorageService localService
@inject HttpClient client
@inject NavigationManager navi

<Grid 
@ref="tablaData"
TItem="SalidasBienes"
Class="table table-hover table-bordered table-striped"
DataProvider="HistorialProvider"
AllowPaging="true"
PageSize="100"
Responsive="true">
    <GridColumns>
        <GridColumn TItem="SalidasBienes" HeaderText="Nombre"> 
            @context.nombre
        </GridColumn>
         <GridColumn TItem="SalidasBienes" HeaderText="Fecha">
            @context.fechaHora
        </GridColumn>
        <GridColumn TItem="SalidasBienes" HeaderText="No. Salida"> 
            @context.noSal
        </GridColumn>
        <GridColumn TItem="SalidasBienes" HeaderText="No. Inventario"> 
            @context.noInven
        </GridColumn>
        <GridColumn TItem="SalidasBienes" HeaderText="Descripción"> 
            @context.descrip
        </GridColumn>
        <GridColumn TItem="SalidasBienes" HeaderText="Motivo"> 
            @context.motivo
        </GridColumn>
        <GridColumn TItem="SalidasBienes" HeaderText="Observaciones"> 
            @context.observa
        </GridColumn>
        <GridColumn TItem="SalidasBienes" HeaderText="Área"> 
            @context.area
        </GridColumn>
        <GridColumn TItem="SalidasBienes" HeaderText="Enc. Área"> 
            @context.eArea
        </GridColumn>
        <GridColumn TItem="SalidasBienes" HeaderText="Estatus"> 
            @context.estatus
        </GridColumn>
    </GridColumns> 

</Grid>

@code{

    private Grid<SalidasBienes> tablaData = default!;
    public string nombreUs { get; set; } = string.Empty;
    public string nInvenStr { get; set; } = string.Empty;
    public long? nInven => long.TryParse(nInvenStr, out var result) ? result : (long?)null;
    public DateOnly date1 { get; set; } = DateOnly.FromDateTime(DateTime.Now);
    private IEnumerable<SalidasBienes> historial { set; get; }
    
    private async Task<GridDataProviderResult<SalidasBienes>> HistorialProvider(GridDataProviderRequest<SalidasBienes> request)
    {
        if (historial is null)
        {
            historial = await ObtenerHistorialAsync();
        }
        return await Task.FromResult(request.ApplyTo(historial));
        
    }

    private async Task<List<SalidasBienes>> ObtenerHistorialAsync()
    {
        await localService.InitializeAsync();
        var idUser = await localService.GetItemAsync("idUserBienes");

        var fecha = date1.ToString("yyyy-MM-dd"); // Formato seguro para URL
        var nombre = nombreUs ?? string.Empty;
        var invent = nInven.HasValue ? nInven.Value.ToString() : "0";

        var url = $"{navi.BaseUri}api/activo/historial/{idUser}/{fecha}/{nombre}/{invent}";

        var request = new HttpRequestMessage(HttpMethod.Get, url);
        var response = await client.SendAsync(request);
        var text = await response.Content.ReadAsStringAsync();

        var data = JsonConvert.DeserializeObject<List<SalidasBienes>>(text);
        return data;
    }


} *@