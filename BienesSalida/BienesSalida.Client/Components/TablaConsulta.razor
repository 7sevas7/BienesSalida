<!--inject LocalStorageService localService-->
@inject HttpClient client
@inject NavigationManager navi
@inject IJSRuntime JS

<Grid 
@ref="tablaData"
TItem="SalidasBienes"
Class="table table-hover table-bordered table-striped"
Data="historial"
AllowPaging="true"
PageSize="100"
Responsive="true">
    <GridColumns>
        <GridColumn TItem="SalidasBienes" HeaderText="Nombre"> 
            @context.nombre
        </GridColumn>
        <GridColumn TItem="SalidasBienes" HeaderText="Fecha">
            @context.fechaHora
        </GridColumn>
        <GridColumn TItem="SalidasBienes" HeaderText="No. Salida"> 
            @context.noSal
        </GridColumn>
        <GridColumn TItem="SalidasBienes" HeaderText="No. Inventario"> 
            @context.noInven
        </GridColumn>
        <GridColumn TItem="SalidasBienes" HeaderText="Descripción"> 
            @context.descrip
        </GridColumn>
        <GridColumn TItem="SalidasBienes" HeaderText="Motivo"> 
            @context.motivo
        </GridColumn>
        <GridColumn TItem="SalidasBienes" HeaderText="Observaciones"> 
            @context.observa
        </GridColumn>
        <GridColumn TItem="SalidasBienes" HeaderText="Área"> 
            @context.area
        </GridColumn>
        <GridColumn TItem="SalidasBienes" HeaderText="Enc. Área"> 
            @context.eArea
        </GridColumn>
        <GridColumn TItem="SalidasBienes" HeaderText="Estatus"> 
            @context.estatus
        </GridColumn>
    </GridColumns> 

</Grid>

@code{

    private Grid<SalidasBienes>? tablaData { get; set; } = new();
    private string? idUser;
    public List<SalidasBienes>? historial { get; set; } = new();

    public string Nombre { get; set; } = string.Empty;

    public string NoInvenStr { get; set; } = string.Empty;

    public string? fecha1 { get; set; }
    public string? fecha2 { get; set; }

    private bool _jsInitialized = false;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_jsInitialized)
        {
            _jsInitialized = true;
            idUser = await JS.InvokeAsync<string>("getLocal", "idUserBienes");
            Console.WriteLine(idUser);
            if (string.IsNullOrEmpty(idUser))
            {
                Console.WriteLine("Navis");
                navi.NavigateTo(navi.BaseUri);            
            }
            await CargaTabla("","",DateOnly.FromDateTime(DateTime.Now)); // Cargar por primera vez
            StateHasChanged(); // Asegura que el UI se actualice         
        }
    }


    private async Task<List<SalidasBienes>> ObtenerHistorialAsync(string? nombre = "", string? inv = "", DateOnly? Fecha1 = null, DateOnly? Fecha2 = null)
    {
        Nombre = nombre;
        NoInvenStr = inv;

        fecha1 = Fecha1?.ToString("dd/MM/yyyy"); 
        fecha2 = Fecha2?.ToString("dd/MM/yyyy");

        var url = $"{navi.BaseUri}api/activo/historial?idUser={idUser}&fecha={fecha1}&invent={NoInvenStr}&nombre={Nombre}";

        var response = await client.GetAsync(url);
        var text = await response.Content.ReadAsStringAsync();
        var data = JsonConvert.DeserializeObject<List<SalidasBienes>>(text);

        return data ?? new();
    }

    public async Task<string> ObtenerHistorialExcel()
    {
        //var fecha = Fecha?.ToString("dd/MM/yyyy");
        return $"{navi.BaseUri}api/activo/generar?idUser={idUser}&fecha={fecha1}&invent={NoInvenStr}&nombre={Nombre}";
    }

    public async Task CargaTabla(string? nombre = "", string? inv = "", DateOnly? Fecha1 = null, DateOnly? Fecha2 = null)
    {
        if (string.IsNullOrEmpty(idUser))
            return;

        historial = await ObtenerHistorialAsync(nombre, inv, Fecha1, Fecha2);

        Console.WriteLine("Obteniendo datos "+ historial.Count);
        await tablaData.RefreshDataAsync();
        StateHasChanged();
        Console.WriteLine("sasasasa");
        
    }

    public List<SalidasBienes> ObtenerDatos()
    {
        return historial ?? new();
    }

} 